// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/upright-backend/internal/ent/predicate"
	"github.com/dongwlin/upright-backend/internal/ent/train"
	"github.com/dongwlin/upright-backend/internal/ent/user"
)

// TrainUpdate is the builder for updating Train entities.
type TrainUpdate struct {
	config
	hooks    []Hook
	mutation *TrainMutation
}

// Where appends a list predicates to the TrainUpdate builder.
func (tu *TrainUpdate) Where(ps ...predicate.Train) *TrainUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TrainUpdate) SetStartTime(t time.Time) *TrainUpdate {
	tu.mutation.SetStartTime(t)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableStartTime(t *time.Time) *TrainUpdate {
	if t != nil {
		tu.SetStartTime(*t)
	}
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TrainUpdate) SetEndTime(t time.Time) *TrainUpdate {
	tu.mutation.SetEndTime(t)
	return tu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableEndTime(t *time.Time) *TrainUpdate {
	if t != nil {
		tu.SetEndTime(*t)
	}
	return tu
}

// SetBendDownTimes sets the "bend_down_times" field.
func (tu *TrainUpdate) SetBendDownTimes(i int64) *TrainUpdate {
	tu.mutation.ResetBendDownTimes()
	tu.mutation.SetBendDownTimes(i)
	return tu
}

// SetNillableBendDownTimes sets the "bend_down_times" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableBendDownTimes(i *int64) *TrainUpdate {
	if i != nil {
		tu.SetBendDownTimes(*i)
	}
	return tu
}

// AddBendDownTimes adds i to the "bend_down_times" field.
func (tu *TrainUpdate) AddBendDownTimes(i int64) *TrainUpdate {
	tu.mutation.AddBendDownTimes(i)
	return tu
}

// SetHunchDownTimes sets the "hunch_down_times" field.
func (tu *TrainUpdate) SetHunchDownTimes(i int64) *TrainUpdate {
	tu.mutation.ResetHunchDownTimes()
	tu.mutation.SetHunchDownTimes(i)
	return tu
}

// SetNillableHunchDownTimes sets the "hunch_down_times" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableHunchDownTimes(i *int64) *TrainUpdate {
	if i != nil {
		tu.SetHunchDownTimes(*i)
	}
	return tu
}

// AddHunchDownTimes adds i to the "hunch_down_times" field.
func (tu *TrainUpdate) AddHunchDownTimes(i int64) *TrainUpdate {
	tu.mutation.AddHunchDownTimes(i)
	return tu
}

// SetIllKeepTimes sets the "ill_keep_times" field.
func (tu *TrainUpdate) SetIllKeepTimes(i int64) *TrainUpdate {
	tu.mutation.ResetIllKeepTimes()
	tu.mutation.SetIllKeepTimes(i)
	return tu
}

// SetNillableIllKeepTimes sets the "ill_keep_times" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableIllKeepTimes(i *int64) *TrainUpdate {
	if i != nil {
		tu.SetIllKeepTimes(*i)
	}
	return tu
}

// AddIllKeepTimes adds i to the "ill_keep_times" field.
func (tu *TrainUpdate) AddIllKeepTimes(i int64) *TrainUpdate {
	tu.mutation.AddIllKeepTimes(i)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TrainUpdate) SetDescription(s string) *TrainUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableDescription(s *string) *TrainUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TrainUpdate) SetStatus(i int8) *TrainUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableStatus(i *int8) *TrainUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TrainUpdate) AddStatus(i int8) *TrainUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TrainUpdate) SetCreatedAt(t time.Time) *TrainUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TrainUpdate) SetNillableCreatedAt(t *time.Time) *TrainUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TrainUpdate) SetOwnerID(id int) *TrainUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tu *TrainUpdate) SetNillableOwnerID(id *int) *TrainUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TrainUpdate) SetOwner(u *User) *TrainUpdate {
	return tu.SetOwnerID(u.ID)
}

// Mutation returns the TrainMutation object of the builder.
func (tu *TrainUpdate) Mutation() *TrainMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TrainUpdate) ClearOwner() *TrainUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrainUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrainUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrainUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TrainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(train.Table, train.Columns, sqlgraph.NewFieldSpec(train.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(train.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.SetField(train.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.BendDownTimes(); ok {
		_spec.SetField(train.FieldBendDownTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedBendDownTimes(); ok {
		_spec.AddField(train.FieldBendDownTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.HunchDownTimes(); ok {
		_spec.SetField(train.FieldHunchDownTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedHunchDownTimes(); ok {
		_spec.AddField(train.FieldHunchDownTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.IllKeepTimes(); ok {
		_spec.SetField(train.FieldIllKeepTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedIllKeepTimes(); ok {
		_spec.AddField(train.FieldIllKeepTimes, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(train.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(train.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(train.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(train.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   train.OwnerTable,
			Columns: []string{train.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   train.OwnerTable,
			Columns: []string{train.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{train.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrainUpdateOne is the builder for updating a single Train entity.
type TrainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrainMutation
}

// SetStartTime sets the "start_time" field.
func (tuo *TrainUpdateOne) SetStartTime(t time.Time) *TrainUpdateOne {
	tuo.mutation.SetStartTime(t)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableStartTime(t *time.Time) *TrainUpdateOne {
	if t != nil {
		tuo.SetStartTime(*t)
	}
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TrainUpdateOne) SetEndTime(t time.Time) *TrainUpdateOne {
	tuo.mutation.SetEndTime(t)
	return tuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableEndTime(t *time.Time) *TrainUpdateOne {
	if t != nil {
		tuo.SetEndTime(*t)
	}
	return tuo
}

// SetBendDownTimes sets the "bend_down_times" field.
func (tuo *TrainUpdateOne) SetBendDownTimes(i int64) *TrainUpdateOne {
	tuo.mutation.ResetBendDownTimes()
	tuo.mutation.SetBendDownTimes(i)
	return tuo
}

// SetNillableBendDownTimes sets the "bend_down_times" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableBendDownTimes(i *int64) *TrainUpdateOne {
	if i != nil {
		tuo.SetBendDownTimes(*i)
	}
	return tuo
}

// AddBendDownTimes adds i to the "bend_down_times" field.
func (tuo *TrainUpdateOne) AddBendDownTimes(i int64) *TrainUpdateOne {
	tuo.mutation.AddBendDownTimes(i)
	return tuo
}

// SetHunchDownTimes sets the "hunch_down_times" field.
func (tuo *TrainUpdateOne) SetHunchDownTimes(i int64) *TrainUpdateOne {
	tuo.mutation.ResetHunchDownTimes()
	tuo.mutation.SetHunchDownTimes(i)
	return tuo
}

// SetNillableHunchDownTimes sets the "hunch_down_times" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableHunchDownTimes(i *int64) *TrainUpdateOne {
	if i != nil {
		tuo.SetHunchDownTimes(*i)
	}
	return tuo
}

// AddHunchDownTimes adds i to the "hunch_down_times" field.
func (tuo *TrainUpdateOne) AddHunchDownTimes(i int64) *TrainUpdateOne {
	tuo.mutation.AddHunchDownTimes(i)
	return tuo
}

// SetIllKeepTimes sets the "ill_keep_times" field.
func (tuo *TrainUpdateOne) SetIllKeepTimes(i int64) *TrainUpdateOne {
	tuo.mutation.ResetIllKeepTimes()
	tuo.mutation.SetIllKeepTimes(i)
	return tuo
}

// SetNillableIllKeepTimes sets the "ill_keep_times" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableIllKeepTimes(i *int64) *TrainUpdateOne {
	if i != nil {
		tuo.SetIllKeepTimes(*i)
	}
	return tuo
}

// AddIllKeepTimes adds i to the "ill_keep_times" field.
func (tuo *TrainUpdateOne) AddIllKeepTimes(i int64) *TrainUpdateOne {
	tuo.mutation.AddIllKeepTimes(i)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TrainUpdateOne) SetDescription(s string) *TrainUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableDescription(s *string) *TrainUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TrainUpdateOne) SetStatus(i int8) *TrainUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableStatus(i *int8) *TrainUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TrainUpdateOne) AddStatus(i int8) *TrainUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TrainUpdateOne) SetCreatedAt(t time.Time) *TrainUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableCreatedAt(t *time.Time) *TrainUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TrainUpdateOne) SetOwnerID(id int) *TrainUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tuo *TrainUpdateOne) SetNillableOwnerID(id *int) *TrainUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TrainUpdateOne) SetOwner(u *User) *TrainUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// Mutation returns the TrainMutation object of the builder.
func (tuo *TrainUpdateOne) Mutation() *TrainMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TrainUpdateOne) ClearOwner() *TrainUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Where appends a list predicates to the TrainUpdate builder.
func (tuo *TrainUpdateOne) Where(ps ...predicate.Train) *TrainUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrainUpdateOne) Select(field string, fields ...string) *TrainUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Train entity.
func (tuo *TrainUpdateOne) Save(ctx context.Context) (*Train, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrainUpdateOne) SaveX(ctx context.Context) *Train {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrainUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrainUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TrainUpdateOne) sqlSave(ctx context.Context) (_node *Train, err error) {
	_spec := sqlgraph.NewUpdateSpec(train.Table, train.Columns, sqlgraph.NewFieldSpec(train.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Train.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, train.FieldID)
		for _, f := range fields {
			if !train.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != train.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(train.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.SetField(train.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.BendDownTimes(); ok {
		_spec.SetField(train.FieldBendDownTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedBendDownTimes(); ok {
		_spec.AddField(train.FieldBendDownTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.HunchDownTimes(); ok {
		_spec.SetField(train.FieldHunchDownTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedHunchDownTimes(); ok {
		_spec.AddField(train.FieldHunchDownTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.IllKeepTimes(); ok {
		_spec.SetField(train.FieldIllKeepTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedIllKeepTimes(); ok {
		_spec.AddField(train.FieldIllKeepTimes, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(train.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(train.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(train.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(train.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   train.OwnerTable,
			Columns: []string{train.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   train.OwnerTable,
			Columns: []string{train.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Train{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{train.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
