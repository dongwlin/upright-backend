// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOpenid holds the string denoting the openid field in the database.
	FieldOpenid = "openid"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTrains holds the string denoting the trains edge name in mutations.
	EdgeTrains = "trains"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TrainsTable is the table that holds the trains relation/edge.
	TrainsTable = "trains"
	// TrainsInverseTable is the table name for the Train entity.
	// It exists in this package in order to avoid circular dependency with the "train" package.
	TrainsInverseTable = "trains"
	// TrainsColumn is the table column denoting the trains relation/edge.
	TrainsColumn = "user_trains"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldOpenid,
	FieldNickname,
	FieldGender,
	FieldAvatar,
	FieldDescription,
	FieldStatus,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGender holds the default value on creation for the "gender" field.
	DefaultGender int8
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOpenid orders the results by the openid field.
func ByOpenid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenid, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTrainsCount orders the results by trains count.
func ByTrainsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrainsStep(), opts...)
	}
}

// ByTrains orders the results by trains terms.
func ByTrains(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTrainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrainsTable, TrainsColumn),
	)
}
