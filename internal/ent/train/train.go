// Code generated by ent, DO NOT EDIT.

package train

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the train type in the database.
	Label = "train"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldBendDownTimes holds the string denoting the bend_down_times field in the database.
	FieldBendDownTimes = "bend_down_times"
	// FieldHunchDownTimes holds the string denoting the hunch_down_times field in the database.
	FieldHunchDownTimes = "hunch_down_times"
	// FieldIllKeepTimes holds the string denoting the ill_keep_times field in the database.
	FieldIllKeepTimes = "ill_keep_times"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the train in the database.
	Table = "trains"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "trains"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_trains"
)

// Columns holds all SQL columns for train fields.
var Columns = []string{
	FieldID,
	FieldStartTime,
	FieldEndTime,
	FieldBendDownTimes,
	FieldHunchDownTimes,
	FieldIllKeepTimes,
	FieldDescription,
	FieldStatus,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trains"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_trains",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Train queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByBendDownTimes orders the results by the bend_down_times field.
func ByBendDownTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBendDownTimes, opts...).ToFunc()
}

// ByHunchDownTimes orders the results by the hunch_down_times field.
func ByHunchDownTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHunchDownTimes, opts...).ToFunc()
}

// ByIllKeepTimes orders the results by the ill_keep_times field.
func ByIllKeepTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIllKeepTimes, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
