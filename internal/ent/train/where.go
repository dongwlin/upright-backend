// Code generated by ent, DO NOT EDIT.

package train

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dongwlin/upright-backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldID, id))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldEndTime, v))
}

// BendDownTimes applies equality check predicate on the "bend_down_times" field. It's identical to BendDownTimesEQ.
func BendDownTimes(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldBendDownTimes, v))
}

// HunchDownTimes applies equality check predicate on the "hunch_down_times" field. It's identical to HunchDownTimesEQ.
func HunchDownTimes(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldHunchDownTimes, v))
}

// IllKeepTimes applies equality check predicate on the "ill_keep_times" field. It's identical to IllKeepTimesEQ.
func IllKeepTimes(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldIllKeepTimes, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldCreatedAt, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldEndTime, v))
}

// BendDownTimesEQ applies the EQ predicate on the "bend_down_times" field.
func BendDownTimesEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldBendDownTimes, v))
}

// BendDownTimesNEQ applies the NEQ predicate on the "bend_down_times" field.
func BendDownTimesNEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldBendDownTimes, v))
}

// BendDownTimesIn applies the In predicate on the "bend_down_times" field.
func BendDownTimesIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldBendDownTimes, vs...))
}

// BendDownTimesNotIn applies the NotIn predicate on the "bend_down_times" field.
func BendDownTimesNotIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldBendDownTimes, vs...))
}

// BendDownTimesGT applies the GT predicate on the "bend_down_times" field.
func BendDownTimesGT(v int64) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldBendDownTimes, v))
}

// BendDownTimesGTE applies the GTE predicate on the "bend_down_times" field.
func BendDownTimesGTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldBendDownTimes, v))
}

// BendDownTimesLT applies the LT predicate on the "bend_down_times" field.
func BendDownTimesLT(v int64) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldBendDownTimes, v))
}

// BendDownTimesLTE applies the LTE predicate on the "bend_down_times" field.
func BendDownTimesLTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldBendDownTimes, v))
}

// HunchDownTimesEQ applies the EQ predicate on the "hunch_down_times" field.
func HunchDownTimesEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldHunchDownTimes, v))
}

// HunchDownTimesNEQ applies the NEQ predicate on the "hunch_down_times" field.
func HunchDownTimesNEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldHunchDownTimes, v))
}

// HunchDownTimesIn applies the In predicate on the "hunch_down_times" field.
func HunchDownTimesIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldHunchDownTimes, vs...))
}

// HunchDownTimesNotIn applies the NotIn predicate on the "hunch_down_times" field.
func HunchDownTimesNotIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldHunchDownTimes, vs...))
}

// HunchDownTimesGT applies the GT predicate on the "hunch_down_times" field.
func HunchDownTimesGT(v int64) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldHunchDownTimes, v))
}

// HunchDownTimesGTE applies the GTE predicate on the "hunch_down_times" field.
func HunchDownTimesGTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldHunchDownTimes, v))
}

// HunchDownTimesLT applies the LT predicate on the "hunch_down_times" field.
func HunchDownTimesLT(v int64) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldHunchDownTimes, v))
}

// HunchDownTimesLTE applies the LTE predicate on the "hunch_down_times" field.
func HunchDownTimesLTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldHunchDownTimes, v))
}

// IllKeepTimesEQ applies the EQ predicate on the "ill_keep_times" field.
func IllKeepTimesEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldIllKeepTimes, v))
}

// IllKeepTimesNEQ applies the NEQ predicate on the "ill_keep_times" field.
func IllKeepTimesNEQ(v int64) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldIllKeepTimes, v))
}

// IllKeepTimesIn applies the In predicate on the "ill_keep_times" field.
func IllKeepTimesIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldIllKeepTimes, vs...))
}

// IllKeepTimesNotIn applies the NotIn predicate on the "ill_keep_times" field.
func IllKeepTimesNotIn(vs ...int64) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldIllKeepTimes, vs...))
}

// IllKeepTimesGT applies the GT predicate on the "ill_keep_times" field.
func IllKeepTimesGT(v int64) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldIllKeepTimes, v))
}

// IllKeepTimesGTE applies the GTE predicate on the "ill_keep_times" field.
func IllKeepTimesGTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldIllKeepTimes, v))
}

// IllKeepTimesLT applies the LT predicate on the "ill_keep_times" field.
func IllKeepTimesLT(v int64) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldIllKeepTimes, v))
}

// IllKeepTimesLTE applies the LTE predicate on the "ill_keep_times" field.
func IllKeepTimesLTE(v int64) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldIllKeepTimes, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Train {
	return predicate.Train(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Train {
	return predicate.Train(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Train {
	return predicate.Train(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Train {
	return predicate.Train(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Train {
	return predicate.Train(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Train {
	return predicate.Train(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Train {
	return predicate.Train(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Train {
	return predicate.Train(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Train {
	return predicate.Train(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Train) predicate.Train {
	return predicate.Train(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Train) predicate.Train {
	return predicate.Train(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Train) predicate.Train {
	return predicate.Train(sql.NotPredicates(p))
}
