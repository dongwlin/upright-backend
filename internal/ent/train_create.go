// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/upright-backend/internal/ent/train"
	"github.com/dongwlin/upright-backend/internal/ent/user"
)

// TrainCreate is the builder for creating a Train entity.
type TrainCreate struct {
	config
	mutation *TrainMutation
	hooks    []Hook
}

// SetStartTime sets the "start_time" field.
func (tc *TrainCreate) SetStartTime(t time.Time) *TrainCreate {
	tc.mutation.SetStartTime(t)
	return tc
}

// SetEndTime sets the "end_time" field.
func (tc *TrainCreate) SetEndTime(t time.Time) *TrainCreate {
	tc.mutation.SetEndTime(t)
	return tc
}

// SetBendDownTimes sets the "bend_down_times" field.
func (tc *TrainCreate) SetBendDownTimes(i int64) *TrainCreate {
	tc.mutation.SetBendDownTimes(i)
	return tc
}

// SetHunchDownTimes sets the "hunch_down_times" field.
func (tc *TrainCreate) SetHunchDownTimes(i int64) *TrainCreate {
	tc.mutation.SetHunchDownTimes(i)
	return tc
}

// SetIllKeepTimes sets the "ill_keep_times" field.
func (tc *TrainCreate) SetIllKeepTimes(i int64) *TrainCreate {
	tc.mutation.SetIllKeepTimes(i)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TrainCreate) SetDescription(s string) *TrainCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TrainCreate) SetStatus(i int8) *TrainCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TrainCreate) SetCreatedAt(t time.Time) *TrainCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TrainCreate) SetNillableCreatedAt(t *time.Time) *TrainCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TrainCreate) SetOwnerID(id int) *TrainCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tc *TrainCreate) SetNillableOwnerID(id *int) *TrainCreate {
	if id != nil {
		tc = tc.SetOwnerID(*id)
	}
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TrainCreate) SetOwner(u *User) *TrainCreate {
	return tc.SetOwnerID(u.ID)
}

// Mutation returns the TrainMutation object of the builder.
func (tc *TrainCreate) Mutation() *TrainMutation {
	return tc.mutation
}

// Save creates the Train in the database.
func (tc *TrainCreate) Save(ctx context.Context) (*Train, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrainCreate) SaveX(ctx context.Context) *Train {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrainCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrainCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrainCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := train.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrainCreate) check() error {
	if _, ok := tc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Train.start_time"`)}
	}
	if _, ok := tc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Train.end_time"`)}
	}
	if _, ok := tc.mutation.BendDownTimes(); !ok {
		return &ValidationError{Name: "bend_down_times", err: errors.New(`ent: missing required field "Train.bend_down_times"`)}
	}
	if _, ok := tc.mutation.HunchDownTimes(); !ok {
		return &ValidationError{Name: "hunch_down_times", err: errors.New(`ent: missing required field "Train.hunch_down_times"`)}
	}
	if _, ok := tc.mutation.IllKeepTimes(); !ok {
		return &ValidationError{Name: "ill_keep_times", err: errors.New(`ent: missing required field "Train.ill_keep_times"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Train.description"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Train.status"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Train.created_at"`)}
	}
	return nil
}

func (tc *TrainCreate) sqlSave(ctx context.Context) (*Train, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrainCreate) createSpec() (*Train, *sqlgraph.CreateSpec) {
	var (
		_node = &Train{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(train.Table, sqlgraph.NewFieldSpec(train.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.StartTime(); ok {
		_spec.SetField(train.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := tc.mutation.EndTime(); ok {
		_spec.SetField(train.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := tc.mutation.BendDownTimes(); ok {
		_spec.SetField(train.FieldBendDownTimes, field.TypeInt64, value)
		_node.BendDownTimes = value
	}
	if value, ok := tc.mutation.HunchDownTimes(); ok {
		_spec.SetField(train.FieldHunchDownTimes, field.TypeInt64, value)
		_node.HunchDownTimes = value
	}
	if value, ok := tc.mutation.IllKeepTimes(); ok {
		_spec.SetField(train.FieldIllKeepTimes, field.TypeInt64, value)
		_node.IllKeepTimes = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(train.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(train.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(train.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   train.OwnerTable,
			Columns: []string{train.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_trains = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrainCreateBulk is the builder for creating many Train entities in bulk.
type TrainCreateBulk struct {
	config
	err      error
	builders []*TrainCreate
}

// Save creates the Train entities in the database.
func (tcb *TrainCreateBulk) Save(ctx context.Context) ([]*Train, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Train, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrainCreateBulk) SaveX(ctx context.Context) []*Train {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrainCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrainCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
