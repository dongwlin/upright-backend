// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dongwlin/upright-backend/internal/ent/train"
	"github.com/dongwlin/upright-backend/internal/ent/user"
)

// Train is the model entity for the Train schema.
type Train struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// BendDownTimes holds the value of the "bend_down_times" field.
	BendDownTimes int64 `json:"bend_down_times,omitempty"`
	// HunchDownTimes holds the value of the "hunch_down_times" field.
	HunchDownTimes int64 `json:"hunch_down_times,omitempty"`
	// IllKeepTimes holds the value of the "ill_keep_times" field.
	IllKeepTimes int64 `json:"ill_keep_times,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainQuery when eager-loading is set.
	Edges        TrainEdges `json:"edges"`
	user_trains  *int
	selectValues sql.SelectValues
}

// TrainEdges holds the relations/edges for other nodes in the graph.
type TrainEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Train) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case train.FieldID, train.FieldBendDownTimes, train.FieldHunchDownTimes, train.FieldIllKeepTimes, train.FieldStatus:
			values[i] = new(sql.NullInt64)
		case train.FieldDescription:
			values[i] = new(sql.NullString)
		case train.FieldStartTime, train.FieldEndTime, train.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case train.ForeignKeys[0]: // user_trains
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Train fields.
func (t *Train) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case train.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case train.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				t.StartTime = value.Time
			}
		case train.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				t.EndTime = value.Time
			}
		case train.FieldBendDownTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bend_down_times", values[i])
			} else if value.Valid {
				t.BendDownTimes = value.Int64
			}
		case train.FieldHunchDownTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hunch_down_times", values[i])
			} else if value.Valid {
				t.HunchDownTimes = value.Int64
			}
		case train.FieldIllKeepTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ill_keep_times", values[i])
			} else if value.Valid {
				t.IllKeepTimes = value.Int64
			}
		case train.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case train.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int8(value.Int64)
			}
		case train.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case train.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_trains", value)
			} else if value.Valid {
				t.user_trains = new(int)
				*t.user_trains = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Train.
// This includes values selected through modifiers, order, etc.
func (t *Train) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Train entity.
func (t *Train) QueryOwner() *UserQuery {
	return NewTrainClient(t.config).QueryOwner(t)
}

// Update returns a builder for updating this Train.
// Note that you need to call Train.Unwrap() before calling this method if this Train
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Train) Update() *TrainUpdateOne {
	return NewTrainClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Train entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Train) Unwrap() *Train {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Train is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Train) String() string {
	var builder strings.Builder
	builder.WriteString("Train(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("start_time=")
	builder.WriteString(t.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(t.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bend_down_times=")
	builder.WriteString(fmt.Sprintf("%v", t.BendDownTimes))
	builder.WriteString(", ")
	builder.WriteString("hunch_down_times=")
	builder.WriteString(fmt.Sprintf("%v", t.HunchDownTimes))
	builder.WriteString(", ")
	builder.WriteString("ill_keep_times=")
	builder.WriteString(fmt.Sprintf("%v", t.IllKeepTimes))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Trains is a parsable slice of Train.
type Trains []*Train
